###########################################
# Stage 1: Build environment
###########################################
FROM nvcr.io/nvidia/l4t-base:r36.2.0 AS builder

WORKDIR /root
ENV DEBIAN_FRONTEND=noninteractive



# Install build tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo ca-certificates build-essential wget m4 flex bison \
    libssl-dev libvulkan-dev  git  ninja-build python3-dev python3-pip \
    wget tar xz-utils \
    && rm -rf /var/lib/apt/lists/*

# (Opzionale) Rimuovi cmake preinstallato se non ti serve
#RUN sudo apt-get remove --purge -y cmake 

# Installa cmake dalla sorgente
#RUN wget https://cmake.org/files/v3.20/cmake-3.20.0.tar.gz && \
#    tar -xzvf cmake-3.20.0.tar.gz && \
#    cd cmake-3.20.0 && \
#    ./bootstrap && \
#    make -j4 && \
#    sudo make install && \
#    cd .. && rm -rf cmake-3.20.0 cmake-3.20.0.tar.gz
RUN wget https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-linux-aarch64.sh && \
    sh cmake-3.20.0-linux-aarch64.sh --skip-license --prefix=/usr/local && \
    rm cmake-3.20.0-linux-aarch64.sh

# Build and install GCC 10.1
RUN wget https://ftpmirror.gnu.org/gcc/gcc-10.1.0/gcc-10.1.0.tar.xz && \
    tar xf gcc-10.1.0.tar.xz && \
    cd gcc-10.1.0 && \
    sudo contrib/download_prerequisites && \
    mkdir gcc10build && cd gcc10build && \
    ../configure -v \
      --build=aarch64-linux-gnu \
      --host=aarch64-linux-gnu \
      --target=aarch64-linux-gnu \
      --prefix=/usr/local/gcc-10.1.0 \
      --enable-checking=release \
      --enable-languages=c,c++ \
      --disable-multilib \
      --disable-libstdcxx-pch \
      --program-suffix=-10.1 && \
    make -j$(nproc) && sudo make install-strip && cd ../.. && rm -rf gcc-10.1.0 gcc-10.1.0.tar.xz

# Crea i symlink per usare la nuova toolchain
RUN sudo rm -f /usr/bin/cpp && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/cpp-10.1 /usr/bin/cpp && \
    sudo rm -f /usr/bin/g++ && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-g++-10.1 /usr/bin/g++ && \
    sudo rm -f /usr/bin/gcc && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-10.1 /usr/bin/gcc && \
    sudo rm -f /usr/bin/gcc-ar && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-ar-10.1 /usr/bin/gcc-ar && \
    sudo rm -f /usr/bin/gcc-nm && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-nm-10.1 /usr/bin/gcc-nm && \
    sudo rm -f /usr/bin/gcc-ranlib && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-ranlib-10.1 /usr/bin/gcc-ranlib && \
    sudo rm -f /usr/bin/aarch64-linux-gnu-cpp && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/cpp-10.1 /usr/bin/aarch64-linux-gnu-cpp && \
    sudo rm -f /usr/bin/aarch64-linux-gnu-g++ && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-g++-10.1 /usr/bin/aarch64-linux-gnu-g++ && \
    sudo rm -f /usr/bin/aarch64-linux-gnu-gcc && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-10.1 /usr/bin/aarch64-linux-gnu-gcc && \
    sudo rm -f /usr/bin/aarch64-linux-gnu-gcc-ar && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-ar-10.1 /usr/bin/aarch64-linux-gnu-gcc-ar && \
    sudo rm -f /usr/bin/aarch64-linux-gnu-gcc-nm && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-nm-10.1 /usr/bin/aarch64-linux-gnu-gcc-nm && \
    sudo rm -f /usr/bin/aarch64-linux-gnu-gcc-ranlib && \
    sudo ln -s /usr/local/gcc-10.1.0/bin/aarch64-linux-gnu-gcc-ranlib-10.1 /usr/bin/aarch64-linux-gnu-gcc-ranlib && \
    rm -rf /root/*.tar.gz /root/*.xz

# Build glslang
RUN git clone https://github.com/KhronosGroup/glslang.git && \
    cd glslang && git checkout tags/15.0.0 && \
    git clone https://github.com/google/googletest.git External/googletest && \
    ./update_glslang_sources.py && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(pwd)/install" .. && \
    make -j$(nproc) install

# Build realsr-ncnn-vulkan (upscaler)
#RUN git clone https://github.com/nihui/realsr-ncnn-vulkan.git && \
#    cd realsr-ncnn-vulkan && git submodule update --init --recursive && \
#    mkdir build && cd build && cmake -DNCNN_BF16=OFF ../src && cmake --build . -j$(nproc)
RUN git clone https://github.com/nihui/realsr-ncnn-vulkan.git && \
    cd realsr-ncnn-vulkan && git submodule update --init --recursive && \
    # rimuovo BF16 file sorgente
    rm -f src/ncnn/src/layer/arm/cast_arm_bf16.cpp && \
    # neutralizzo chiamate a funzioni bf16 in cast_arm.cpp
    sed -i '/cast_fp32_to_bf16_neon/d' src/ncnn/src/layer/arm/cast_arm.cpp && \
    sed -i '/cast_bf16_to_fp32_neon/d' src/ncnn/src/layer/arm/cast_arm.cpp && \
    mkdir build && cd build && cmake -DNCNN_BF16=OFF -DNCNN_ARM82=OFF -DNCNN_ARM82DOT=OFF ../src && \
    cmake --build . -j$(nproc)


###########################################
# Stage 2: Runtime image
###########################################
FROM dustynv/jetson-inference:r36.2.0

WORKDIR /app

# --- System dependencies ---
ENV DEBIAN_FRONTEND=noninteractive
ENV LD_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu
RUN apt-get update && apt-get install -y --no-install-recommends \
    libsm6 libxext6 libxrender-dev ffmpeg libvulkan-dev python3-pip python3-dev \
    build-essential cmake ninja-build \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# --- Copy GCC toolchain ---
COPY --from=builder /usr/local/gcc-10.1.0 /usr/local/gcc-10.1.0
COPY --from=builder /usr/bin/gcc /usr/bin/gcc
COPY --from=builder /usr/bin/g++ /usr/bin/g++
ENV PATH=/usr/local/gcc-10.1.0/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/gcc-10.1.0/lib64:$LD_LIBRARY_PATH

# --- Copy binaries ---
COPY --from=builder /root/realsr-ncnn-vulkan /root/realsr-ncnn-vulkan
COPY --from=builder /root/glslang/build/install /root/glslang/install

# --- Python dependencies ---
COPY requirements.txt /app/
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
    pip3 install --no-cache-dir requests flask pika imageio==2.6.1 imageio-ffmpeg==0.3.0 --index-url https://pypi.org/simple && \
    pip3 install --no-cache-dir -r requirements.txt --index-url https://pypi.org/simple
ENV USE_LIGHT=false
# --- Application code ---
COPY app.py /app/
COPY /steps /app/steps

EXPOSE 5000
ENTRYPOINT ["/bin/bash", "-c", "ln -sf /usr/lib/aarch64-linux-gnu/liblapack.so /usr/lib/aarch64-linux-gnu/liblapack.so.3 && exec python3 app.py"]

