###########################################
# Stage 1: Build environment
###########################################
FROM nvcr.io/nvidia/l4t-base:r36.2.0 AS builder

WORKDIR /root
ENV DEBIAN_FRONTEND=noninteractive

# Install build tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    sudo ca-certificates build-essential wget m4 flex bison \
    libssl-dev libvulkan-dev git ninja-build cmake build-essential python3-dev python3-pip \
    tar xz-utils \
    && rm -rf /var/lib/apt/lists/*
#ENV LD_LIBRARY_PATH=/usr/lib/aarch64-linux-gnu:$LD_LIBRARY_PATH

# Build glslang
RUN git clone https://github.com/KhronosGroup/glslang.git && \
    cd glslang && git checkout tags/15.0.0 && \
    git clone https://github.com/google/googletest.git External/googletest && \
    ./update_glslang_sources.py && mkdir build && cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(pwd)/install" .. && \
    make -j$(nproc) install

# Build realsr-ncnn-vulkan (upscaler)
#RUN git clone https://github.com/nihui/realsr-ncnn-vulkan.git && \
#    cd realsr-ncnn-vulkan && git submodule update --init --recursive && \
#    mkdir build && cd build && cmake -DNCNN_BF16=OFF ../src && cmake --build . -j$(nproc)
RUN git clone https://github.com/nihui/realsr-ncnn-vulkan.git && \
    cd realsr-ncnn-vulkan && git submodule update --init --recursive && \
    # rimuovo BF16 file sorgente
    rm -f src/ncnn/src/layer/arm/cast_arm_bf16.cpp && \
    # neutralizzo chiamate a funzioni bf16 in cast_arm.cpp
    sed -i '/cast_fp32_to_bf16_neon/d' src/ncnn/src/layer/arm/cast_arm.cpp && \
    sed -i '/cast_bf16_to_fp32_neon/d' src/ncnn/src/layer/arm/cast_arm.cpp && \
    mkdir build && cd build && cmake -DNCNN_BF16=OFF -DNCNN_ARM82=OFF -DNCNN_ARM82DOT=OFF ../src && \
    cmake --build . -j$(nproc)


###########################################
# Stage 2: Runtime
###########################################
FROM nvcr.io/nvidia/l4t-base:r36.2.0
#FROM nvcr.io/nvidia/l4t-cuda:12.2.12-devel
#FROM dustynv/l4t-pytorch:r36.2.0
WORKDIR /app
ENV DEBIAN_FRONTEND=noninteractive
#ENV PATH=/usr/local/gcc-10.1.0/bin:$PATH
#ENV LD_LIBRARY_PATH=/usr/local/gcc-10.1.0/lib64:$LD_LIBRARY_PATH
#ENV LD_LIBRARY_PATH=/usr/local/gcc-10.1.0/lib64


# System dependencies
RUN apt-get update && apt-get install -y \
    python3-pip python3-dev libjpeg-dev libpng-dev libglib2.0-0 \
    libsm6 libxext6 libxrender-dev libopenblas-dev git\
    && rm -rf /var/lib/apt/lists/*
# Install PyTorch GPU for Jetson
#ENV TORCH_INSTALL=https://developer.download.nvidia.com/compute/redist/jp/v61/pytorch/torch-2.5.0a0+872d972e41.nv24.08.17622132-cp310-cp310-linux_aarch64.whl
#RUN python3 -m pip install --upgrade pip setuptools wheel && \
#    python3 -m pip install numpy==1.24.4 && \
#    python3 -m pip install --no-cache-dir $TORCH_INSTALL


# Clona e installa torchvision
#RUN git clone --branch release/0.20 https://github.com/pytorch/vision.git /tmp/vision \
# && cd /tmp/vision \
# && export BUILD_VERSION=0.20.0 \
# && python3 setup.py install --user\
# && cd / && rm -rf /tmp/vision
#RUN pip3 uninstall -y tensorflow tensorflow-cpu tensorflow-gpu || true
#RUN pip3 install --no-cache-dir https://developer.download.nvidia.com/compute/redist/jp/v61/tensorflow/tensorflow-2.16.1+nv24.08-cp310-cp310-linux_aarch64.whl
# Python dependencies
#COPY requirements.txt /app/
#RUN pip3 install --no-cache-dir --upgrade pip && \
#    pip3 install --no-cache-dir -r requirements.txt && \
#    pip3 install --no-cache-dir pillow opencv-python-headless
# Python dependencies
COPY requirements.txt /app/
#RUN pip3 install --no-cache-dir --upgrade pip && \
#    pip3 install --no-cache-dir --index-url https://pypi.org/simple -r requirements.txt && \
#    pip3 install --no-cache-dir --index-url https://pypi.org/simple pillow opencv-python-headless
# forza numpy compatibile
#RUN pip3 uninstall -y numpy || true \
# && pip3 install --no-cache-dir "numpy<2"
RUN pip3 install --no-cache-dir --upgrade pip && \
    pip3 install --no-cache-dir --index-url https://pypi.org/simple --ignore-installed -r requirements.txt && \
    pip3 install --no-cache-dir --index-url https://pypi.org/simple pillow opencv-python-headless
RUN pip3 uninstall -y numpy || true && \
    pip3 install --no-cache-dir "numpy<2"
RUN pip3 uninstall -y tensorflow tensorflow-cpu tensorflow-gpu || true && \
    pip3 install --no-cache-dir https://developer.download.nvidia.com/compute/redist/jp/v61/tensorflow/tensorflow-2.16.1+nv24.08-cp310-cp310-linux_aarch64.whl
RUN pip3 install --no-cache-dir tf-keras==2.16.0 "protobuf<5" tensorflow_hub

# Copy custom binaries from builder
#COPY --from=builder /usr/local/gcc-10.1.0 /usr/local/gcc-10.1.0
COPY --from=builder /root/glslang/build/install /root/glslang/install
COPY --from=builder /root/realsr-ncnn-vulkan /root/realsr-ncnn-vulkan
ENV USE_LIGHT=true
# Copy app code
COPY app.py /app/
COPY /steps /app/steps
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/aarch64-linux-gnu
EXPOSE 5000

# Entrypoint con LD_LIBRARY_PATH settato solo per runtime
ENTRYPOINT ["/bin/bash", "-c", "exec python3 app_with_tf.py"]
